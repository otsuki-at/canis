#! /bin/bash -u
# .envファイルのパスを設定する．
ENVDIR=/home/otsuki/git/trigora/.env

usage(){
	echo "Usage: trigora [OPTION]... ACTION
OPTION:
	--help
    --env
ACTION:
	start        enable system.
	stop         disable system."
}

improper(){
	echo -e "trigora: unrecognized argument.\\nTry 'trigora --help' for more information."
}

if [ $# -ne 1 ] && [ $1 != "--env" ]; then
	improper
	exit 1
fi

if [ $1 == "start" ]
then
    # .envファイルに設定した環境変数の読み込み
    source $ENVDIR
    export LOGDIR
    export DIR

    for ignore in $(compgen -v | grep ^IGNORE); do
	    export $ignore
    done

	# 履歴収集部の収集先ログファイル作成
	sudo touch $LOGDIR/fuse-watch.log
	sudo chmod o+w $LOGDIR/fuse-watch.log
	echo `date`,"$LOGDIR/fuse-watch.log created." >> $DIR/log/trigora.log

	# proc.stat作成
	# touch ../tmp/proc.stat
	# echo "proc.stat create."

    # 履歴収集部起動
	$DIR/src/collector/collector /fuse-watch
    # $DIR/src/collector/redis-collector /fuse-watch
	# echo "collector 1" >> ../tmp/proc.stat
	echo `date`,"Collecter started." >> $DIR/log/trigora.log

	# ホームディレクトリのシンボリックリンク調整
	sudo mv ${HOME} ${HOME}.can
	sudo ln -s /fuse-watch${HOME}.can ${HOME}
	# echo "symlink 1" >> ../tmp/proc.stat
	echo `date`,"Symlink created." >> $DIR/log/trigora.log

	# Redis起動
	if [ ! -d "/var/run/redis" ]; then
		sudo mkdir /var/run/redis
	fi
	sudo redis-server /etc/redis/redis.conf
	# echo "redis 1" >> ../tmp/proc.stat
	echo `date`,"Redis server started." >> $DIR/log/trigora.log

    # 履歴送信部起動
    python3 $DIR/src/gethistory/gethistory.py $LOGDIR/fuse-watch.log gethistory.pid &
    echo `date`,"Gethistory started." >> $DIR/log/trigora.log

    # 履歴変換部起動
	# python3 $DIR/src/converter/converter.py $LOGDIR/fuse-watch.log converter.pid &
    python3 $DIR/src/converter/redis-converter.py converter.pid &
	# echo "converter 1" >> ../tmp/proc.stat
	echo `date`,"Converter started." >> $DIR/log/trigora.log

    # # ハッシュ作成部起動
    # python3 $DIR/src/makehash/makehash.py $LOGDIR/fuse-watch.log makehash.pid &
    python3 $DIR/src/makehash/redis-makehash.py makehash.pid &
    # echo `date`,"Makehash started." >> $DIR/log/trigora.log

	# 実行部起動
	python3 $DIR/src/executor/executor.py $DIR/conf/actions/actions.conf.yaml executor.pid &
	# echo "executor 1" >> ../tmp/proc.stat
	echo `date`,"Executor started." >> $DIR/log/trigora.log
elif [ $1 == "stop" ]
then
    # .envファイルに設定した環境変数の読み込み
    source $ENVDIR
    export LOGDIR
    export DIR

	# シンボリックリンク解除
	# SYMLINK_STAT=`cat ../tmp/proc.stat | grep symlink`
	# if [ ${SYMLINK_STAT: -1} -eq 1 ]; then
	if [ -L ${HOME} ]; then
		sudo unlink ${HOME}
        cd $PWD
		sudo mv ${HOME}.can ${HOME}
		cd ${HOME}
		# sed -i "s/symlink 1/symlink 0/g" ../tmp/proc.stat
		echo `date`,"Symlink deleted." >> $DIR/log/trigora.log
	fi
	# fi

	# 履歴変換部停止
	# CONVERTER_PID="`ps -auxf | grep ../src/converter | awk '{print $2}'`"
	# kill $CONVERTER_PID
	# echo "$CONVERTER_PID"
	# echo "Converter stop."
	#
	# # 実行部停止
	# EXECUTOR_PID="`ps -auxf | grep ../src/executor | awk '{print $2}'`"
	# kill $EXECUTOR_PID
	# echo "Executor stop."

	# 履歴変換部，実行部停止
	# CVT_EXC_STAT=`cat ../tmp/proc.stat | grep converter`
	# if [ ${CVT_EXC_STAT: -1} -eq 1 ]; then
	# 	while read LINE
	# 	do
	# 		kill $LINE
	# 	done < ../tmp/proc.pid
	# 	echo "Converter stop."
	# 	echo "Executor stop."
	# 	sed -i "s/converter 1/converter 0/g" ../tmp/proc.stat
	# 	sed -i "s/executor 1/executor 0/g" ../tmp/proc.stat
	# fi

	# ハッシュ作成部，履歴変換部，実行部停止
    # if [ -e $DIR/tmp/makehash.pid ]; then
	# 	MAKEHASH_PID="`cat $DIR/tmp/makehash.pid`"
	# 	kill $MAKEHASH_PID
	#  	echo `date`,"Makehash stop." >> $DIR/log/trigora.log
	# fi

	if [ -e $DIR/tmp/gethistory.pid ]; then
		GETHISTORY_PID="`cat $DIR/tmp/gethistory.pid`"
		kill $GETHISTORY_PID
	 	echo `date`,"gethistory stop." >> $DIR/log/trigora.log
	fi

	if [ -e $DIR/tmp/converter.pid ]; then
		CONVERTER_PID="`cat $DIR/tmp/converter.pid`"
		kill $CONVERTER_PID
	 	echo `date`,"Converter stop." >> $DIR/log/trigora.log
	fi

	if [ -e $DIR/tmp/executor.pid ]; then
		EXECUTOR_PID="`cat $DIR/tmp/executor.pid`"
		kill $EXECUTOR_PID
	 	echo `date`,"Executor stop." >> $DIR/log/trigora.log
	fi

	# proc.pid削除
	# PROC_PID_STAT=`cat ../tmp/proc.stat | grep proc.pid`
	# if [ ${PROC_PID_STAT: -1} -eq 1 ]; then
	# 	rm ../tmp/proc.pid
	# 	echo "Remove proc.pid."
	# 	sed -i "s/proc.pid 1/proc.pid 0/g" ../tmp/proc.stat
	# fi

	# Redis停止
	# REDIS_STAT=`cat ../tmp/proc.stat | grep redis`
	# if [ ${REDIS_STAT: -1} -eq 1 ]; then
	if [ -e /var/run/redis/redis-server.pid ]; then
		sudo pkill redis-server
		echo `date`,"Redis stop." >> $DIR/log/trigora.log
	fi
	# sed -i "s/redis 1/redis 0/g" ../tmp/proc.stat
	# fi

	# 各プロセス終了後，即ファイルシステムをアンマウントすると剥がれないので少し待機
	sleep 0.5

	# ファイルシステム(履歴収集部)アンマウント
	# COLLECTOR_STAT=`cat ../tmp/proc.stat | grep collector`
	# if [ ${COLLECTOR_STAT: -1} -eq 1 ]; then
	RSLT=`mount | grep collector`
	if [ -n "$RSLT" ]; then
		sudo umount /fuse-watch
		if [ $? -ne 0 ]; then
			exit 1;
		fi
		echo `date`,"Collector stop." >> $DIR/log/trigora.log
    	# sed -i "s/collector 1/collector 0/g" ../tmp/proc.stat
	fi

	# proc.stat削除
	# rm ../tmp/proc.stat
	# echo "Remove proc.stat."

elif [ $1 == "--help" ]
then
	usage
elif [ $1 == "--env" ]
then
    ENVDIR=$2
else
	improper
fi
